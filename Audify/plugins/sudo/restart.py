import asyncio
import os
import shutil
import socket
from datetime import datetime

import urllib3
from git import Repo
from git.exc import GitCommandError, InvalidGitRepositoryError
from pyrogram import filters

import config
from Audify import app
from Audify.misc import HAPP, SUDOERS, XCB
from Audify.utils.database import (
    get_active_chats,
    remove_active_chat,
    remove_active_video_chat,
)
from Audify.utils.decorators.language import language
from Audify.utils.pastebin import AudifyBin

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


async def is_heroku():
    return "heroku" in socket.getfqdn()


@app.on_message(filters.command(["getlog", "logs", "getlogs"], prefixes=["/", "!", "%", ",", "", ".", "@", "#"]) & SUDOERS)
@language
async def log_(client, message, _):
    try:
        await message.reply_document(document="log.txt")
    except:
        await message.reply_text(_["server_1"])


@app.on_message(filters.command(["update", "gitpull"], prefixes=["/", "!", "%", ",", "", ".", "@", "#"]) & SUDOERS)
@language
async def update_(client, message, _):
    # Initial response with a modern loading message
    loader = ["‚†ã ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±", "‚†ô ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±.", "‚†π ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±..", "‚†∏ ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±..."]
    response = await message.reply_text(loader[0])
    
    # Simulate loading animation
    for i in range(1, 4):
        await asyncio.sleep(1)
        await response.edit(loader[i])
    
    # Check if running on Heroku
    if await is_heroku():
        if HAPP is None:
            await response.edit("üö´ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á Íú∞·¥Ä…™ ü·¥á·¥Ö**:  ú·¥á Ä·¥è·¥ã·¥ú ·¥á…¥·¥†…™ Ä·¥è…¥·¥ç·¥á…¥·¥õ …¥·¥è·¥õ ·¥Ñ·¥è…¥Íú∞…™…¢·¥ú Ä·¥á·¥Ö ·¥ò Ä·¥è·¥ò·¥á Ä ü è.")
            return
    
    try:
        repo = Repo()
    except GitCommandError:
        await response.edit("‚ö†Ô∏è **·¥á Ä Ä·¥è Ä**: …¢…™·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö Íú∞·¥Ä…™ ü·¥á·¥Ö. ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä Íú±·¥á·¥õ·¥ú·¥ò.")
        return
    except InvalidGitRepositoryError:
        await response.edit("‚ö†Ô∏è **·¥á Ä Ä·¥è Ä**: …¥·¥è·¥õ ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¢…™·¥õ  Ä·¥á·¥ò·¥èÍú±…™·¥õ·¥è Ä è.")
        return
    
    # Fetch updates from the remote repository
    to_exc = f"git fetch origin {config.UPSTREAM_BRANCH} &> /dev/null"
    os.system(to_exc)
    await asyncio.sleep(7)
    
    # Check for new commits
    verification = ""
    REPO_ = repo.remotes.origin.url.split(".git")[0]
    for checks in repo.iter_commits(f"HEAD..origin/{config.UPSTREAM_BRANCH}"):
        verification = str(checks.count())
    
    if verification == "":
        await response.edit("‚úÖ **…¥·¥è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á**:  è·¥è·¥ú Ä  ô·¥è·¥õ …™Íú± ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ú·¥ò ·¥õ·¥è ·¥Ö·¥Ä·¥õ·¥á!")
        return
    
    # Format update details
    updates = ""
    ordinal = lambda format: "%d%s" % (
        format,
        "tsnrhtdd"[(format // 10 % 10 != 1) * (format % 10 < 4) * format % 10 :: 4],
    )
    for info in repo.iter_commits(f"HEAD..origin/{config.UPSTREAM_BRANCH}"):
        updates += (
            f"**#{info.count()}**: [{info.summary}]({REPO_}/·¥Ñ·¥è·¥ç·¥ç…™·¥õ/{info})\n"
            f"  ‚§∑ ·¥Ñ·¥è·¥ç·¥ç…™·¥õ·¥õ·¥á·¥Ö ·¥è…¥: {ordinal(int(datetime.fromtimestamp(info.committed_date).strftime('%d')))} "
            f"{datetime.fromtimestamp(info.committed_date).strftime('%b')}, "
            f"{datetime.fromtimestamp(info.committed_date).strftime('%Y')}\n\n"
        )
    
    # Modern update message
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    version = getattr(config, "VERSION", "Unknown")  # Replace with actual version if available
    _update_response_ = (
        "** ô·¥è·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á**\n\n"
        f"**·¥†·¥á ÄÍú±…™·¥è…¥**: {version}\n"
        f"**·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥õ…™·¥ç·¥á**: {current_time}\n"
        "üîÑ **·¥ò·¥úÍú± ú…™…¥…¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± …¥·¥è·¥°...**\n\n"
        "**üîî ·¥Ñ ú·¥Ä…¥…¢·¥á ü·¥è…¢**:\n\n"
    )
    _final_updates_ = _update_response_ + updates
    
    # Handle message length for Telegram (4096 character limit)
    if len(_final_updates_) > 4096:
        url = await AudifyBin(updates)
        nrs = await response.edit(
            f"** ô·¥è·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á**\n\n"
            f"**·¥†·¥á ÄÍú±…™·¥è…¥**: {version}\n"
            f"**·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥õ…™·¥ç·¥á**: {current_time}\n"
            "üîÑ **·¥ò·¥úÍú± ú…™…¥…¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± …¥·¥è·¥°...**\n\n"
            f"**üîî ·¥Ñ ú·¥Ä…¥…¢·¥á ü·¥è…¢**: [·¥†…™·¥á·¥° ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±]({url})",
            disable_web_page_preview=True
        )
    else:
        nrs = await response.edit(_final_updates_, disable_web_page_preview=True)
    
    # Perform the git pull
    os.system("git stash &> /dev/null && git pull")
    
    # Notify active chats
    try:
        served_chats = await get_active_chats()
        for x in served_chats:
            try:
                await app.send_message(
                    chat_id=int(x),
                    text=f"ü§ñ {app.mention}  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è ·¥†·¥á ÄÍú±…™·¥è…¥ {version}!  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢ …¥·¥è·¥°...",
                )
                await remove_active_chat(x)
                await remove_active_video_chat(x)
            except:
                pass
        await response.edit(f"{nrs.text}\n\n‚úÖ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á**:  ô·¥è·¥õ …™Íú±  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢...")
    except:
        pass
    
    # Handle Heroku or local restart
    if await is_heroku():
        try:
            os.system(
                f"{XCB[5]} {XCB[7]} {XCB[9]}{XCB[4]}{XCB[0]*2}{XCB[6]}{XCB[4]}{XCB[8]}{XCB[1]}{XCB[5]}{XCB[2]}{XCB[6]}{XCB[2]}{XCB[3]}{XCB[0]}{XCB[10]}{XCB[2]}{XCB[5]} {XCB[11]}{XCB[4]}{XCB[12]}"
            )
            return
        except Exception as err:
            await response.edit(f"{nrs.text}\n\nüö´ **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á Íú∞·¥Ä…™ ü·¥á·¥Ö**: ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥Ö·¥ú Ä…™…¥…¢  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ.")
            await app.send_message(
                chat_id=config.LOGGER_ID,
                text=f"‚ö†Ô∏è **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥á Ä Ä·¥è Ä**: {err}",
            )
            return
    else:
        os.system("pip3 install -r requirements.txt")
        os.system(f"kill -9 {os.getpid()} && bash start")
        exit()


@app.on_message(filters.command(["restart"]) & SUDOERS)
async def restart_(_, message):
    response = await message.reply_text(" Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢...")
    ac_chats = await get_active_chats()
    for x in ac_chats:
        try:
            await app.send_message(
                chat_id=int(x),
                text=f"{app.mention} …™s  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢...\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥õ·¥Ä Ä·¥õ ·¥© ü·¥Ä è…™…¥…¢ ·¥Ä…¢·¥Ä…™…¥ ·¥Ä“ì·¥õ·¥á Ä 15-20 s·¥á·¥Ñ·¥è…¥·¥Ös.",
            )
            await remove_active_chat(x)
            await remove_active_video_chat(x)
        except:
            pass

    try:
        shutil.rmtree("downloads")
        shutil.rmtree("raw_files")
        shutil.rmtree("cache")
    except:
        pass
    await response.edit_text(
        "¬ª  Ä·¥ás·¥õ·¥Ä Ä·¥õ ·¥ò Ä·¥è·¥Ñ·¥áss s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö, ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ “ì·¥è Ä “ì·¥á·¥° s·¥á·¥Ñ·¥è…¥·¥Ös ·¥ú…¥·¥õ…™ ü ·¥õ ú·¥á  ô·¥è·¥õ s·¥õ·¥Ä Ä·¥õs..."
    )
    os.system(f"kill -9 {os.getpid()} && bash start")
